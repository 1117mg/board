<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.study.board.repository.BoardMapper">

    <select id="getBoardList" resultType="org.study.board.dto.Board">
        SELECT b.*
             , CASE WHEN COUNT(*)  <![CDATA[>]]> 1
                        THEN CONCAT(f.filename, '외 ' , COUNT(*)-1, '건')
                    ELSE f.filename
            END file_name
        FROM board b
        LEFT JOIN file f ON b.bno = f.bno
        WHERE b.delete_yn != 1 AND b.board_type=#{boardType}
        GROUP BY b.bno
        ORDER BY b.bno DESC
        LIMIT #{pageSize} OFFSET #{pageOffset}
    </select>

    <select id="getQnaList" resultType="org.study.board.dto.Board">
        SELECT b.*
             , CASE WHEN COUNT(*)  <![CDATA[>]]> 1
                        THEN CONCAT(f.filename, '외 ' , COUNT(*)-1, '건')
                    ELSE f.filename
            END file_name
        FROM board b
        LEFT JOIN file f ON b.bno = f.bno
        WHERE b.delete_yn != 1 AND b.board_type=#{boardType}
        GROUP BY b.bno
        ORDER BY b.gno DESC, b.sorts ASC
            LIMIT #{pageSize} OFFSET #{pageOffset}
    </select>

    <select id="getBoard" parameterType="int"
            resultType="org.study.board.dto.Board">
        select *
        from board
        where delete_yn!=1 and bno=#{bno}
    </select>

    <select id="getParentBoards" parameterType="int" resultType="org.study.board.dto.Board">
        WITH RECURSIVE parent_board AS (
            SELECT b.*
            FROM board b
            WHERE b.bno = #{bno}
            UNION ALL
            SELECT b.*
            FROM board b
                     JOIN parent_board pb ON b.gno = pb.gno AND b.depth = pb.depth - 1 AND b.sorts <![CDATA[<]]> pb.sorts
        )
        SELECT * FROM parent_board
        WHERE bno = (SELECT parent_bno FROM board WHERE bno=#{bno})
        ORDER BY gno DESC, sorts ASC;
    </select>

    <select id="getChildBoards" parameterType="int" resultType="org.study.board.dto.Board">
        WITH RECURSIVE child_board AS (
            SELECT b.*
            FROM board b
            WHERE b.bno = #{bno}
            UNION ALL
            SELECT b.*
            FROM board b
                     JOIN child_board cb ON b.gno = cb.gno AND b.depth = cb.depth + 1 AND b.sorts > cb.sorts
        )
        SELECT *
        FROM child_board
        WHERE parent_bno = (SELECT bno FROM board WHERE bno=#{bno})
        ORDER BY gno DESC, sorts ASC;
    </select>

    <update id="updateSorts" parameterType="int">
        update board
        set sorts=sorts+1 WHERE gno=#{gno} and sorts>#{sorts}
    </update>

    <update id="hit" parameterType="int">
        update board
        SET hit= hit+1
        WHERE bno=#{bno}
    </update>

    <select id="cntBoard" resultType="Integer" parameterType="Integer">
        SELECT count(*)
        FROM board
        WHERE delete_yn!=1 AND board_type=#{boardType}
    </select>

    <!--첨부파일 리스트-->
    <select id="getFile" resultType="org.study.board.dto.FileDto">
        SELECT *
        FROM file
        WHERE delete_yn!=1 and bno=#{bno}
    </select>

    <select id="getMaxGno" resultType="int">
        SELECT IFNULL(MAX(gno), 0) FROM board
    </select>

    <insert id="insertBoard" parameterType="org.study.board.dto.Board">
        INSERT INTO board (title, content, writer, regdate, hit, delete_yn, board_type, gno, sorts, depth, parent_bno, user_idx)
        VALUES (#{title}, #{content}, #{writer}, NOW(), 0, 0, #{boardType}, #{gno}, #{sorts}, #{depth}, #{parentBno}, #{userIdx})
        <selectKey keyProperty="bno" resultType="int" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <update id="updateBoard" parameterType="org.study.board.dto.Board">
        UPDATE board
        SET title=#{title}, content=#{content}, writer=#{writer}, regdate=NOW(), delete_yn=0, board_type=#{boardType}, user_idx=#{userIdx}
        WHERE bno = #{bno}
    </update>

    <update id="deleteBoard" parameterType="map">
        update board
        SET delete_yn=1
        WHERE bno=#{bno}
    </update>

    <update id="deleteChildBoards" parameterType="int">
        WITH RECURSIVE child_board AS (
            SELECT b.*
            FROM board b
            WHERE b.bno = #{bno}
            UNION ALL
            SELECT b.*
            FROM board b
                     JOIN child_board cb ON b.gno = cb.gno AND b.depth = cb.depth + 1 AND b.sorts > cb.sorts
        )
        UPDATE board
        SET delete_yn = 1
        WHERE bno IN (SELECT bno FROM child_board);
    </update>

    <insert id="insertFile" parameterType="org.study.board.dto.Board">
        INSERT INTO file (bno, uuid, filename, content_type)
        VALUES
        <foreach collection="list" separator="," index="index" item="item">
            (#{bno}, #{item.uuid}, #{item.filename}, #{item.contentType})
        </foreach>
    </insert>

    <update id="deleteFile" parameterType="org.study.board.dto.Board">
        UPDATE file
        SET delete_yn=1
        WHERE bno=#{bno} AND delete_yn=0
    </update>
</mapper>